// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: jinrou.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Jinrou {
  public static partial class Jinrou
  {
    static readonly string __ServiceName = "jinrou.Jinrou";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Jinrou.RegisterRequest> __Marshaller_jinrou_RegisterRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.RegisterRequest.Parser));
    static readonly grpc::Marshaller<global::Jinrou.RegisterResponse> __Marshaller_jinrou_RegisterResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.RegisterResponse.Parser));
    static readonly grpc::Marshaller<global::Jinrou.RefreshRequest> __Marshaller_jinrou_RefreshRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.RefreshRequest.Parser));
    static readonly grpc::Marshaller<global::Jinrou.RefreshResponse> __Marshaller_jinrou_RefreshResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.RefreshResponse.Parser));
    static readonly grpc::Marshaller<global::Jinrou.CreateGameRequest> __Marshaller_jinrou_CreateGameRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.CreateGameRequest.Parser));
    static readonly grpc::Marshaller<global::Jinrou.CreateGameResponse> __Marshaller_jinrou_CreateGameResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.CreateGameResponse.Parser));
    static readonly grpc::Marshaller<global::Jinrou.JoinRequest> __Marshaller_jinrou_JoinRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.JoinRequest.Parser));
    static readonly grpc::Marshaller<global::Jinrou.JoinResponse> __Marshaller_jinrou_JoinResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.JoinResponse.Parser));
    static readonly grpc::Marshaller<global::Jinrou.LeaveRequest> __Marshaller_jinrou_LeaveRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.LeaveRequest.Parser));
    static readonly grpc::Marshaller<global::Jinrou.LeaveResponse> __Marshaller_jinrou_LeaveResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.LeaveResponse.Parser));
    static readonly grpc::Marshaller<global::Jinrou.VoteRequest> __Marshaller_jinrou_VoteRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.VoteRequest.Parser));
    static readonly grpc::Marshaller<global::Jinrou.VoteResponse> __Marshaller_jinrou_VoteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.VoteResponse.Parser));
    static readonly grpc::Marshaller<global::Jinrou.KillRequest> __Marshaller_jinrou_KillRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.KillRequest.Parser));
    static readonly grpc::Marshaller<global::Jinrou.KillResponse> __Marshaller_jinrou_KillResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.KillResponse.Parser));
    static readonly grpc::Marshaller<global::Jinrou.NextRequest> __Marshaller_jinrou_NextRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.NextRequest.Parser));
    static readonly grpc::Marshaller<global::Jinrou.NextResponse> __Marshaller_jinrou_NextResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.NextResponse.Parser));
    static readonly grpc::Marshaller<global::Jinrou.GetRolesRequest> __Marshaller_jinrou_GetRolesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.GetRolesRequest.Parser));
    static readonly grpc::Marshaller<global::Jinrou.GetRolesResponse> __Marshaller_jinrou_GetRolesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.GetRolesResponse.Parser));
    static readonly grpc::Marshaller<global::Jinrou.ObserveStateRequest> __Marshaller_jinrou_ObserveStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.ObserveStateRequest.Parser));
    static readonly grpc::Marshaller<global::Jinrou.ObserveStateResponse> __Marshaller_jinrou_ObserveStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.ObserveStateResponse.Parser));
    static readonly grpc::Marshaller<global::Jinrou.UnobserveStateRequest> __Marshaller_jinrou_UnobserveStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.UnobserveStateRequest.Parser));
    static readonly grpc::Marshaller<global::Jinrou.UnobserveStateResponse> __Marshaller_jinrou_UnobserveStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Jinrou.UnobserveStateResponse.Parser));

    static readonly grpc::Method<global::Jinrou.RegisterRequest, global::Jinrou.RegisterResponse> __Method_Register = new grpc::Method<global::Jinrou.RegisterRequest, global::Jinrou.RegisterResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Register",
        __Marshaller_jinrou_RegisterRequest,
        __Marshaller_jinrou_RegisterResponse);

    static readonly grpc::Method<global::Jinrou.RefreshRequest, global::Jinrou.RefreshResponse> __Method_Refresh = new grpc::Method<global::Jinrou.RefreshRequest, global::Jinrou.RefreshResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Refresh",
        __Marshaller_jinrou_RefreshRequest,
        __Marshaller_jinrou_RefreshResponse);

    static readonly grpc::Method<global::Jinrou.CreateGameRequest, global::Jinrou.CreateGameResponse> __Method_CreateGame = new grpc::Method<global::Jinrou.CreateGameRequest, global::Jinrou.CreateGameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGame",
        __Marshaller_jinrou_CreateGameRequest,
        __Marshaller_jinrou_CreateGameResponse);

    static readonly grpc::Method<global::Jinrou.JoinRequest, global::Jinrou.JoinResponse> __Method_Join = new grpc::Method<global::Jinrou.JoinRequest, global::Jinrou.JoinResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Join",
        __Marshaller_jinrou_JoinRequest,
        __Marshaller_jinrou_JoinResponse);

    static readonly grpc::Method<global::Jinrou.LeaveRequest, global::Jinrou.LeaveResponse> __Method_Leave = new grpc::Method<global::Jinrou.LeaveRequest, global::Jinrou.LeaveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Leave",
        __Marshaller_jinrou_LeaveRequest,
        __Marshaller_jinrou_LeaveResponse);

    static readonly grpc::Method<global::Jinrou.VoteRequest, global::Jinrou.VoteResponse> __Method_Vote = new grpc::Method<global::Jinrou.VoteRequest, global::Jinrou.VoteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Vote",
        __Marshaller_jinrou_VoteRequest,
        __Marshaller_jinrou_VoteResponse);

    static readonly grpc::Method<global::Jinrou.KillRequest, global::Jinrou.KillResponse> __Method_Kill = new grpc::Method<global::Jinrou.KillRequest, global::Jinrou.KillResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Kill",
        __Marshaller_jinrou_KillRequest,
        __Marshaller_jinrou_KillResponse);

    static readonly grpc::Method<global::Jinrou.NextRequest, global::Jinrou.NextResponse> __Method_Next = new grpc::Method<global::Jinrou.NextRequest, global::Jinrou.NextResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Next",
        __Marshaller_jinrou_NextRequest,
        __Marshaller_jinrou_NextResponse);

    static readonly grpc::Method<global::Jinrou.GetRolesRequest, global::Jinrou.GetRolesResponse> __Method_GetRoles = new grpc::Method<global::Jinrou.GetRolesRequest, global::Jinrou.GetRolesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRoles",
        __Marshaller_jinrou_GetRolesRequest,
        __Marshaller_jinrou_GetRolesResponse);

    static readonly grpc::Method<global::Jinrou.ObserveStateRequest, global::Jinrou.ObserveStateResponse> __Method_ObserveState = new grpc::Method<global::Jinrou.ObserveStateRequest, global::Jinrou.ObserveStateResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ObserveState",
        __Marshaller_jinrou_ObserveStateRequest,
        __Marshaller_jinrou_ObserveStateResponse);

    static readonly grpc::Method<global::Jinrou.UnobserveStateRequest, global::Jinrou.UnobserveStateResponse> __Method_UnobserveState = new grpc::Method<global::Jinrou.UnobserveStateRequest, global::Jinrou.UnobserveStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnobserveState",
        __Marshaller_jinrou_UnobserveStateRequest,
        __Marshaller_jinrou_UnobserveStateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Jinrou.JinrouReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Jinrou</summary>
    [grpc::BindServiceMethod(typeof(Jinrou), "BindService")]
    public abstract partial class JinrouBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Jinrou.RegisterResponse> Register(global::Jinrou.RegisterRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jinrou.RefreshResponse> Refresh(global::Jinrou.RefreshRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jinrou.CreateGameResponse> CreateGame(global::Jinrou.CreateGameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jinrou.JoinResponse> Join(global::Jinrou.JoinRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jinrou.LeaveResponse> Leave(global::Jinrou.LeaveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jinrou.VoteResponse> Vote(global::Jinrou.VoteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jinrou.KillResponse> Kill(global::Jinrou.KillRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jinrou.NextResponse> Next(global::Jinrou.NextRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jinrou.GetRolesResponse> GetRoles(global::Jinrou.GetRolesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task ObserveState(global::Jinrou.ObserveStateRequest request, grpc::IServerStreamWriter<global::Jinrou.ObserveStateResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Jinrou.UnobserveStateResponse> UnobserveState(global::Jinrou.UnobserveStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Jinrou</summary>
    public partial class JinrouClient : grpc::ClientBase<JinrouClient>
    {
      /// <summary>Creates a new client for Jinrou</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public JinrouClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Jinrou that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public JinrouClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected JinrouClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected JinrouClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Jinrou.RegisterResponse Register(global::Jinrou.RegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Register(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jinrou.RegisterResponse Register(global::Jinrou.RegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Register, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.RegisterResponse> RegisterAsync(global::Jinrou.RegisterRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.RegisterResponse> RegisterAsync(global::Jinrou.RegisterRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Register, null, options, request);
      }
      public virtual global::Jinrou.RefreshResponse Refresh(global::Jinrou.RefreshRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Refresh(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jinrou.RefreshResponse Refresh(global::Jinrou.RefreshRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Refresh, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.RefreshResponse> RefreshAsync(global::Jinrou.RefreshRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RefreshAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.RefreshResponse> RefreshAsync(global::Jinrou.RefreshRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Refresh, null, options, request);
      }
      public virtual global::Jinrou.CreateGameResponse CreateGame(global::Jinrou.CreateGameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGame(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jinrou.CreateGameResponse CreateGame(global::Jinrou.CreateGameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGame, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.CreateGameResponse> CreateGameAsync(global::Jinrou.CreateGameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.CreateGameResponse> CreateGameAsync(global::Jinrou.CreateGameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGame, null, options, request);
      }
      public virtual global::Jinrou.JoinResponse Join(global::Jinrou.JoinRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Join(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jinrou.JoinResponse Join(global::Jinrou.JoinRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Join, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.JoinResponse> JoinAsync(global::Jinrou.JoinRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return JoinAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.JoinResponse> JoinAsync(global::Jinrou.JoinRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Join, null, options, request);
      }
      public virtual global::Jinrou.LeaveResponse Leave(global::Jinrou.LeaveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Leave(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jinrou.LeaveResponse Leave(global::Jinrou.LeaveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Leave, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.LeaveResponse> LeaveAsync(global::Jinrou.LeaveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.LeaveResponse> LeaveAsync(global::Jinrou.LeaveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Leave, null, options, request);
      }
      public virtual global::Jinrou.VoteResponse Vote(global::Jinrou.VoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Vote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jinrou.VoteResponse Vote(global::Jinrou.VoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Vote, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.VoteResponse> VoteAsync(global::Jinrou.VoteRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.VoteResponse> VoteAsync(global::Jinrou.VoteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Vote, null, options, request);
      }
      public virtual global::Jinrou.KillResponse Kill(global::Jinrou.KillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Kill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jinrou.KillResponse Kill(global::Jinrou.KillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Kill, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.KillResponse> KillAsync(global::Jinrou.KillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KillAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.KillResponse> KillAsync(global::Jinrou.KillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Kill, null, options, request);
      }
      public virtual global::Jinrou.NextResponse Next(global::Jinrou.NextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Next(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jinrou.NextResponse Next(global::Jinrou.NextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Next, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.NextResponse> NextAsync(global::Jinrou.NextRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NextAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.NextResponse> NextAsync(global::Jinrou.NextRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Next, null, options, request);
      }
      public virtual global::Jinrou.GetRolesResponse GetRoles(global::Jinrou.GetRolesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoles(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jinrou.GetRolesResponse GetRoles(global::Jinrou.GetRolesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRoles, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.GetRolesResponse> GetRolesAsync(global::Jinrou.GetRolesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRolesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.GetRolesResponse> GetRolesAsync(global::Jinrou.GetRolesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRoles, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::Jinrou.ObserveStateResponse> ObserveState(global::Jinrou.ObserveStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ObserveState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::Jinrou.ObserveStateResponse> ObserveState(global::Jinrou.ObserveStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ObserveState, null, options, request);
      }
      public virtual global::Jinrou.UnobserveStateResponse UnobserveState(global::Jinrou.UnobserveStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnobserveState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Jinrou.UnobserveStateResponse UnobserveState(global::Jinrou.UnobserveStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnobserveState, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.UnobserveStateResponse> UnobserveStateAsync(global::Jinrou.UnobserveStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnobserveStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Jinrou.UnobserveStateResponse> UnobserveStateAsync(global::Jinrou.UnobserveStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnobserveState, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override JinrouClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new JinrouClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(JinrouBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Register, serviceImpl.Register)
          .AddMethod(__Method_Refresh, serviceImpl.Refresh)
          .AddMethod(__Method_CreateGame, serviceImpl.CreateGame)
          .AddMethod(__Method_Join, serviceImpl.Join)
          .AddMethod(__Method_Leave, serviceImpl.Leave)
          .AddMethod(__Method_Vote, serviceImpl.Vote)
          .AddMethod(__Method_Kill, serviceImpl.Kill)
          .AddMethod(__Method_Next, serviceImpl.Next)
          .AddMethod(__Method_GetRoles, serviceImpl.GetRoles)
          .AddMethod(__Method_ObserveState, serviceImpl.ObserveState)
          .AddMethod(__Method_UnobserveState, serviceImpl.UnobserveState).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, JinrouBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Register, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jinrou.RegisterRequest, global::Jinrou.RegisterResponse>(serviceImpl.Register));
      serviceBinder.AddMethod(__Method_Refresh, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jinrou.RefreshRequest, global::Jinrou.RefreshResponse>(serviceImpl.Refresh));
      serviceBinder.AddMethod(__Method_CreateGame, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jinrou.CreateGameRequest, global::Jinrou.CreateGameResponse>(serviceImpl.CreateGame));
      serviceBinder.AddMethod(__Method_Join, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jinrou.JoinRequest, global::Jinrou.JoinResponse>(serviceImpl.Join));
      serviceBinder.AddMethod(__Method_Leave, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jinrou.LeaveRequest, global::Jinrou.LeaveResponse>(serviceImpl.Leave));
      serviceBinder.AddMethod(__Method_Vote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jinrou.VoteRequest, global::Jinrou.VoteResponse>(serviceImpl.Vote));
      serviceBinder.AddMethod(__Method_Kill, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jinrou.KillRequest, global::Jinrou.KillResponse>(serviceImpl.Kill));
      serviceBinder.AddMethod(__Method_Next, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jinrou.NextRequest, global::Jinrou.NextResponse>(serviceImpl.Next));
      serviceBinder.AddMethod(__Method_GetRoles, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jinrou.GetRolesRequest, global::Jinrou.GetRolesResponse>(serviceImpl.GetRoles));
      serviceBinder.AddMethod(__Method_ObserveState, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Jinrou.ObserveStateRequest, global::Jinrou.ObserveStateResponse>(serviceImpl.ObserveState));
      serviceBinder.AddMethod(__Method_UnobserveState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Jinrou.UnobserveStateRequest, global::Jinrou.UnobserveStateResponse>(serviceImpl.UnobserveState));
    }

  }
}
#endregion
