// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// JinrouClient is the client API for Jinrou service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JinrouClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillResponse, error)
	Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextResponse, error)
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	ObserveState(ctx context.Context, in *ObserveStateRequest, opts ...grpc.CallOption) (Jinrou_ObserveStateClient, error)
	UnobserveState(ctx context.Context, in *UnobserveStateRequest, opts ...grpc.CallOption) (*UnobserveStateResponse, error)
}

type jinrouClient struct {
	cc grpc.ClientConnInterface
}

func NewJinrouClient(cc grpc.ClientConnInterface) JinrouClient {
	return &jinrouClient{cc}
}

func (c *jinrouClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/jinrou.Jinrou/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jinrouClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, "/jinrou.Jinrou/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jinrouClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*CreateGameResponse, error) {
	out := new(CreateGameResponse)
	err := c.cc.Invoke(ctx, "/jinrou.Jinrou/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jinrouClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/jinrou.Jinrou/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jinrouClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, "/jinrou.Jinrou/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jinrouClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/jinrou.Jinrou/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jinrouClient) Kill(ctx context.Context, in *KillRequest, opts ...grpc.CallOption) (*KillResponse, error) {
	out := new(KillResponse)
	err := c.cc.Invoke(ctx, "/jinrou.Jinrou/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jinrouClient) Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextResponse, error) {
	out := new(NextResponse)
	err := c.cc.Invoke(ctx, "/jinrou.Jinrou/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jinrouClient) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, "/jinrou.Jinrou/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jinrouClient) ObserveState(ctx context.Context, in *ObserveStateRequest, opts ...grpc.CallOption) (Jinrou_ObserveStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Jinrou_serviceDesc.Streams[0], "/jinrou.Jinrou/ObserveState", opts...)
	if err != nil {
		return nil, err
	}
	x := &jinrouObserveStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Jinrou_ObserveStateClient interface {
	Recv() (*ObserveStateResponse, error)
	grpc.ClientStream
}

type jinrouObserveStateClient struct {
	grpc.ClientStream
}

func (x *jinrouObserveStateClient) Recv() (*ObserveStateResponse, error) {
	m := new(ObserveStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jinrouClient) UnobserveState(ctx context.Context, in *UnobserveStateRequest, opts ...grpc.CallOption) (*UnobserveStateResponse, error) {
	out := new(UnobserveStateResponse)
	err := c.cc.Invoke(ctx, "/jinrou.Jinrou/UnobserveState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JinrouServer is the server API for Jinrou service.
// All implementations must embed UnimplementedJinrouServer
// for forward compatibility
type JinrouServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error)
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Leave(context.Context, *LeaveRequest) (*LeaveResponse, error)
	Vote(context.Context, *VoteRequest) (*VoteResponse, error)
	Kill(context.Context, *KillRequest) (*KillResponse, error)
	Next(context.Context, *NextRequest) (*NextResponse, error)
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error)
	ObserveState(*ObserveStateRequest, Jinrou_ObserveStateServer) error
	UnobserveState(context.Context, *UnobserveStateRequest) (*UnobserveStateResponse, error)
	mustEmbedUnimplementedJinrouServer()
}

// UnimplementedJinrouServer must be embedded to have forward compatible implementations.
type UnimplementedJinrouServer struct {
}

func (UnimplementedJinrouServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedJinrouServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedJinrouServer) CreateGame(context.Context, *CreateGameRequest) (*CreateGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedJinrouServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedJinrouServer) Leave(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedJinrouServer) Vote(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedJinrouServer) Kill(context.Context, *KillRequest) (*KillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedJinrouServer) Next(context.Context, *NextRequest) (*NextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (UnimplementedJinrouServer) GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedJinrouServer) ObserveState(*ObserveStateRequest, Jinrou_ObserveStateServer) error {
	return status.Errorf(codes.Unimplemented, "method ObserveState not implemented")
}
func (UnimplementedJinrouServer) UnobserveState(context.Context, *UnobserveStateRequest) (*UnobserveStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnobserveState not implemented")
}
func (UnimplementedJinrouServer) mustEmbedUnimplementedJinrouServer() {}

// UnsafeJinrouServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JinrouServer will
// result in compilation errors.
type UnsafeJinrouServer interface {
	mustEmbedUnimplementedJinrouServer()
}

func RegisterJinrouServer(s grpc.ServiceRegistrar, srv JinrouServer) {
	s.RegisterService(&_Jinrou_serviceDesc, srv)
}

func _Jinrou_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JinrouServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinrou.Jinrou/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JinrouServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jinrou_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JinrouServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinrou.Jinrou/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JinrouServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jinrou_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JinrouServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinrou.Jinrou/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JinrouServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jinrou_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JinrouServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinrou.Jinrou/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JinrouServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jinrou_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JinrouServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinrou.Jinrou/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JinrouServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jinrou_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JinrouServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinrou.Jinrou/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JinrouServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jinrou_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JinrouServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinrou.Jinrou/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JinrouServer).Kill(ctx, req.(*KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jinrou_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JinrouServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinrou.Jinrou/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JinrouServer).Next(ctx, req.(*NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jinrou_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JinrouServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinrou.Jinrou/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JinrouServer).GetRoles(ctx, req.(*GetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jinrou_ObserveState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ObserveStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JinrouServer).ObserveState(m, &jinrouObserveStateServer{stream})
}

type Jinrou_ObserveStateServer interface {
	Send(*ObserveStateResponse) error
	grpc.ServerStream
}

type jinrouObserveStateServer struct {
	grpc.ServerStream
}

func (x *jinrouObserveStateServer) Send(m *ObserveStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Jinrou_UnobserveState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnobserveStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JinrouServer).UnobserveState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jinrou.Jinrou/UnobserveState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JinrouServer).UnobserveState(ctx, req.(*UnobserveStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Jinrou_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jinrou.Jinrou",
	HandlerType: (*JinrouServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Jinrou_Register_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _Jinrou_Refresh_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _Jinrou_CreateGame_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Jinrou_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _Jinrou_Leave_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Jinrou_Vote_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Jinrou_Kill_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _Jinrou_Next_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _Jinrou_GetRoles_Handler,
		},
		{
			MethodName: "UnobserveState",
			Handler:    _Jinrou_UnobserveState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObserveState",
			Handler:       _Jinrou_ObserveState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jinrou.proto",
}
